//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""03cc83b8-dfee-421c-a539-09cab6462ded"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f856ffe6-926f-47fd-8f19-2a972bedaa71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""901b736d-cfb5-4d0a-872d-b1c8dfb618c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cfb736e8-1828-4188-9145-bce585f62f60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f6c7278-3409-48a7-9e7e-01fb5ecce3ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f994592-0d2f-4072-85a2-c39af722fc62"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2a7a438-8e5c-4a14-ba1b-125c58dd7d3a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GravitySwitch"",
            ""id"": ""729da495-7dda-4516-8dc7-232c988f6499"",
            ""actions"": [
                {
                    ""name"": ""SwitchUp"",
                    ""type"": ""Button"",
                    ""id"": ""c5dd0cb8-9d2b-4e86-86f6-d03495cda282"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchDown"",
                    ""type"": ""Button"",
                    ""id"": ""c93f2c14-d822-48e5-ad8e-9c21d3dc16ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9f968654-06b5-44e0-917b-ea664ad186fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRight"",
                    ""type"": ""Button"",
                    ""id"": ""827ddb84-5b83-4197-857e-ffd7e9a8bfeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e320251-f0cc-421c-bbde-15b933955573"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80ee9343-8e41-4785-8032-d15b87ec67ff"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f4d5da1-9083-42ec-aed2-2c5a4ca48d66"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f23874cf-c1f6-4701-839e-31f66592f4fb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_MoveLeft = m_Movement.FindAction("MoveLeft", throwIfNotFound: true);
        m_Movement_MoveRight = m_Movement.FindAction("MoveRight", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // GravitySwitch
        m_GravitySwitch = asset.FindActionMap("GravitySwitch", throwIfNotFound: true);
        m_GravitySwitch_SwitchUp = m_GravitySwitch.FindAction("SwitchUp", throwIfNotFound: true);
        m_GravitySwitch_SwitchDown = m_GravitySwitch.FindAction("SwitchDown", throwIfNotFound: true);
        m_GravitySwitch_SwitchLeft = m_GravitySwitch.FindAction("SwitchLeft", throwIfNotFound: true);
        m_GravitySwitch_SwitchRight = m_GravitySwitch.FindAction("SwitchRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_MoveLeft;
    private readonly InputAction m_Movement_MoveRight;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_Movement_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Movement_MoveRight;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // GravitySwitch
    private readonly InputActionMap m_GravitySwitch;
    private List<IGravitySwitchActions> m_GravitySwitchActionsCallbackInterfaces = new List<IGravitySwitchActions>();
    private readonly InputAction m_GravitySwitch_SwitchUp;
    private readonly InputAction m_GravitySwitch_SwitchDown;
    private readonly InputAction m_GravitySwitch_SwitchLeft;
    private readonly InputAction m_GravitySwitch_SwitchRight;
    public struct GravitySwitchActions
    {
        private @PlayerInputActions m_Wrapper;
        public GravitySwitchActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchUp => m_Wrapper.m_GravitySwitch_SwitchUp;
        public InputAction @SwitchDown => m_Wrapper.m_GravitySwitch_SwitchDown;
        public InputAction @SwitchLeft => m_Wrapper.m_GravitySwitch_SwitchLeft;
        public InputAction @SwitchRight => m_Wrapper.m_GravitySwitch_SwitchRight;
        public InputActionMap Get() { return m_Wrapper.m_GravitySwitch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GravitySwitchActions set) { return set.Get(); }
        public void AddCallbacks(IGravitySwitchActions instance)
        {
            if (instance == null || m_Wrapper.m_GravitySwitchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GravitySwitchActionsCallbackInterfaces.Add(instance);
            @SwitchUp.started += instance.OnSwitchUp;
            @SwitchUp.performed += instance.OnSwitchUp;
            @SwitchUp.canceled += instance.OnSwitchUp;
            @SwitchDown.started += instance.OnSwitchDown;
            @SwitchDown.performed += instance.OnSwitchDown;
            @SwitchDown.canceled += instance.OnSwitchDown;
            @SwitchLeft.started += instance.OnSwitchLeft;
            @SwitchLeft.performed += instance.OnSwitchLeft;
            @SwitchLeft.canceled += instance.OnSwitchLeft;
            @SwitchRight.started += instance.OnSwitchRight;
            @SwitchRight.performed += instance.OnSwitchRight;
            @SwitchRight.canceled += instance.OnSwitchRight;
        }

        private void UnregisterCallbacks(IGravitySwitchActions instance)
        {
            @SwitchUp.started -= instance.OnSwitchUp;
            @SwitchUp.performed -= instance.OnSwitchUp;
            @SwitchUp.canceled -= instance.OnSwitchUp;
            @SwitchDown.started -= instance.OnSwitchDown;
            @SwitchDown.performed -= instance.OnSwitchDown;
            @SwitchDown.canceled -= instance.OnSwitchDown;
            @SwitchLeft.started -= instance.OnSwitchLeft;
            @SwitchLeft.performed -= instance.OnSwitchLeft;
            @SwitchLeft.canceled -= instance.OnSwitchLeft;
            @SwitchRight.started -= instance.OnSwitchRight;
            @SwitchRight.performed -= instance.OnSwitchRight;
            @SwitchRight.canceled -= instance.OnSwitchRight;
        }

        public void RemoveCallbacks(IGravitySwitchActions instance)
        {
            if (m_Wrapper.m_GravitySwitchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGravitySwitchActions instance)
        {
            foreach (var item in m_Wrapper.m_GravitySwitchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GravitySwitchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GravitySwitchActions @GravitySwitch => new GravitySwitchActions(this);
    public interface IMovementActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGravitySwitchActions
    {
        void OnSwitchUp(InputAction.CallbackContext context);
        void OnSwitchDown(InputAction.CallbackContext context);
        void OnSwitchLeft(InputAction.CallbackContext context);
        void OnSwitchRight(InputAction.CallbackContext context);
    }
}
